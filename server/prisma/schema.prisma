datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  FACTORY
  LOGISTIC
  MANAGER
}

enum AuditAction {
  PROFILE_VIEW
  PROFILE_UPDATE
  EMAIL_CHANGE_REQUEST
  EMAIL_CHANGE_CONFIRM
  PASSWORD_CHANGE
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_CONFIRM
  LOGIN_SUCCESS
  LOGIN_FAILURE
  ACCOUNT_REGISTERED
  EMAIL_VERIFICATION_SENT
  EMAIL_VERIFIED
}

enum ActorType {
  USER
  SYSTEM
  EXTERNAL
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String?
  role          Role?
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  countryId  Int?
  regionId   Int?
  street     String?
  postalCode String?

  country Country? @relation(fields: [countryId], references: [id])
  region  Region?  @relation(fields: [regionId], references: [id])

  requests           CustomerRequest[]
  factoryResponses   FactoryResponse[]
  logisticResponses  LogisticResponse[]
  logs               AuditLog[]
  actorLogs          AuditLog[]          @relation("ActorToLogs")
  categoryLinks      CategoryToUser[]
  verificationTokens VerificationToken[]

  @@index([countryId])
  @@index([regionId])
}

model CustomerRequest {
  id          Int      @id @default(autoincrement())
  customerId  Int
  customer    User     @relation(fields: [customerId], references: [id])
  itemName    String
  unit        String
  quantity    Decimal
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  description String?
  location    String?
  status      String   @default("PENDING")
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())

  factoryResponses FactoryResponse[]

  @@index([customerId])
  @@index([categoryId])
}

model FactoryResponse {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  requestId     Int
  request       CustomerRequest @relation(fields: [requestId], references: [id])
  price         Float
  currency      String
  estimatedDays Int
  location      String?
  isArchived    Boolean         @default(false)
  createdAt     DateTime        @default(now())

  logisticResponses LogisticResponse[]
  compiledOffers    CompiledOffer[]

  @@index([requestId])
}

model LogisticResponse {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  factoryResponseId Int
  factoryResponse   FactoryResponse @relation(fields: [factoryResponseId], references: [id])
  etaDays           Int
  deliveryCost      Float
  isArchived        Boolean         @default(false)
  createdAt         DateTime        @default(now())

  compiledOffers CompiledOffer[]

  @@index([factoryResponseId])
}

model AuditLog {
  id         Int         @id @default(autoincrement())
  userId     Int?
  actorId    Int?
  actorType  ActorType   @default(USER)
  action     AuditAction
  targetType String?
  targetId   String?
  ip         String?
  userAgent  String?
  requestId  String?
  metadata   Json?
  createdAt  DateTime    @default(now())

  user  User? @relation(fields: [userId], references: [id])
  actor User? @relation("ActorToLogs", fields: [actorId], references: [id])

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([actorType, createdAt])
}

model CompiledOffer {
  id                 Int              @id @default(autoincrement())
  factoryResponseId  Int
  factoryResponse    FactoryResponse  @relation(fields: [factoryResponseId], references: [id])
  logisticResponseId Int
  logisticResponse   LogisticResponse @relation(fields: [logisticResponseId], references: [id])
  createdAt          DateTime         @default(now())

  finalOffer FinalOffer?

  @@unique([factoryResponseId, logisticResponseId])
}

model FinalOffer {
  id              Int           @id @default(autoincrement())
  compiledOfferId Int           @unique
  compiledOffer   CompiledOffer @relation(fields: [compiledOfferId], references: [id])
  finalEtaDays    Int
  finalPrice      Decimal
  margin          Decimal       @default(0.0)
  currency        String
  finalNote       String?
  confirmed       Boolean       @default(false)
  createdAt       DateTime      @default(now())
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  requests CustomerRequest[]

  userLinks CategoryToUser[]
}

model CategoryToUser {
  categoryId Int
  userId     Int

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([categoryId, userId])
}

model Country {
  id           Int                  @id @default(autoincrement())
  code         String               @unique
  regions      Region[]
  translations CountryTranslation[]

  users User[]
}

model CountryTranslation {
  id        Int    @id @default(autoincrement())
  countryId Int
  lang      String
  name      String

  country Country @relation(fields: [countryId], references: [id])

  @@unique([countryId, lang])
}

model Region {
  id           Int                 @id @default(autoincrement())
  countryId    Int
  translations RegionTranslation[]

  country Country @relation(fields: [countryId], references: [id])

  users User[]
}

model RegionTranslation {
  id       Int    @id @default(autoincrement())
  regionId Int
  lang     String
  name     String

  region Region @relation(fields: [regionId], references: [id])

  @@unique([regionId, lang])
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  tokenHash String    @unique
  type      String
  payload   Json?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@index([expiresAt])
}
