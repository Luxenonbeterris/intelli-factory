datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  FACTORY
  LOGISTIC
  MANAGER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role?
  location  String?
  createdAt DateTime @default(now())

  requests           CustomerRequest[]
  factoryResponses   FactoryResponse[]
  logisticResponses  LogisticResponse[]
  logs               AuditLog[]
}

model CustomerRequest {
  id          Int      @id @default(autoincrement())
  customerId  Int
  customer    User     @relation(fields: [customerId], references: [id])
  itemName    String
  unit        String
  quantity    Float
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  description String?
  location    String?
  createdAt   DateTime @default(now())

  factoryResponses FactoryResponse[]
}

model FactoryResponse {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  requestId   Int
  request     CustomerRequest @relation(fields: [requestId], references: [id])
  price       Float
  currency    String
  estimatedDays Int
  location    String?
  createdAt   DateTime @default(now())

  logisticResponses LogisticResponse[]
  compiledOffers    CompiledOffer[]
}

model LogisticResponse {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  factoryResponseId Int
  factoryResponse   FactoryResponse @relation(fields: [factoryResponseId], references: [id])
  etaDays           Int
  deliveryCost      Float
  createdAt         DateTime @default(now())

  compiledOffers CompiledOffer[]
}

model CompiledOffer {
  id                Int      @id @default(autoincrement())
  factoryResponseId Int
  factoryResponse   FactoryResponse @relation(fields: [factoryResponseId], references: [id])
  logisticResponseId Int
  logisticResponse   LogisticResponse @relation(fields: [logisticResponseId], references: [id])
  createdAt         DateTime @default(now())

  finalOffer FinalOffer?
}

model FinalOffer {
  id              Int      @id @default(autoincrement())
  compiledOfferId Int      @unique
  compiledOffer   CompiledOffer @relation(fields: [compiledOfferId], references: [id])
  finalEtaDays    Int
  finalPrice      Float
  currency        String
  createdAt       DateTime @default(now())
  confirmed       Boolean  @default(false)
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique

  requests CustomerRequest[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  createdAt DateTime @default(now())
}
