datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  FACTORY
  LOGISTIC
  MANAGER
}

model User {
  id             Int                  @id @default(autoincrement())
  email          String               @unique
  password       String
  name           String?
  role           Role?
  location       String?
  emailVerified  Boolean              @default(false)
  createdAt      DateTime             @default(now())

  countryId  Int?
  regionId   Int?
  country    Country? @relation(fields: [countryId], references: [id])
  region     Region?  @relation(fields: [regionId], references: [id])

  requests           CustomerRequest[]
  factoryResponses   FactoryResponse[]
  logisticResponses  LogisticResponse[]
  logs               AuditLog[]

  categoryLinks CategoryToUser[]
  verificationTokens VerificationToken[]
}

model CustomerRequest {
  id          Int      @id @default(autoincrement())
  customerId  Int
  customer    User     @relation(fields: [customerId], references: [id])
  itemName    String
  unit        String
  quantity    Decimal
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  description String?
  location    String?
  status      String   @default("PENDING")
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())

  factoryResponses FactoryResponse[]

  @@index([customerId])
  @@index([categoryId])
}

model FactoryResponse {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  requestId     Int
  request       CustomerRequest @relation(fields: [requestId], references: [id])
  price         Float
  currency      String
  estimatedDays Int
  location      String?
  isArchived    Boolean  @default(false)
  createdAt     DateTime @default(now())

  logisticResponses LogisticResponse[]
  compiledOffers    CompiledOffer[]

  @@index([requestId])
}

model LogisticResponse {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  factoryResponseId Int
  factoryResponse   FactoryResponse @relation(fields: [factoryResponseId], references: [id])
  etaDays           Int
  deliveryCost      Float
  isArchived        Boolean  @default(false)
  createdAt         DateTime @default(now())

  compiledOffers CompiledOffer[]

  @@index([factoryResponseId])
}

model CompiledOffer {
  id                  Int      @id @default(autoincrement())
  factoryResponseId   Int
  factoryResponse     FactoryResponse @relation(fields: [factoryResponseId], references: [id])
  logisticResponseId  Int
  logisticResponse    LogisticResponse @relation(fields: [logisticResponseId], references: [id])
  createdAt           DateTime @default(now())

  finalOffer FinalOffer?

  @@unique([factoryResponseId, logisticResponseId])
}

model FinalOffer {
  id              Int      @id @default(autoincrement())
  compiledOfferId Int      @unique
  compiledOffer   CompiledOffer @relation(fields: [compiledOfferId], references: [id])
  finalEtaDays    Int
  finalPrice      Decimal
  margin          Decimal   @default(0.0) 
  currency        String
  finalNote       String?
  confirmed       Boolean   @default(false)
  createdAt       DateTime  @default(now())
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  requests CustomerRequest[]

  userLinks CategoryToUser[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
}

model CategoryToUser {
  categoryId Int
  userId     Int

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([categoryId, userId])
}

model Country {
  id           Int                  @id @default(autoincrement())
  code         String               @unique
  regions      Region[]
  translations CountryTranslation[]

  users User[]
}

model CountryTranslation {
  id        Int     @id @default(autoincrement())
  countryId Int
  lang      String 
  name      String

  country Country @relation(fields: [countryId], references: [id])
  @@unique([countryId, lang])
}

model Region {
  id           Int                 @id @default(autoincrement())
  countryId    Int
  translations RegionTranslation[]

  country Country @relation(fields: [countryId], references: [id])

  users User[]
}

model RegionTranslation {
  id       Int     @id @default(autoincrement())
  regionId Int
  lang     String
  name     String

  region Region @relation(fields: [regionId], references: [id])
  @@unique([regionId, lang])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  userId     Int
  tokenHash  String
  type       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([tokenHash])
}
